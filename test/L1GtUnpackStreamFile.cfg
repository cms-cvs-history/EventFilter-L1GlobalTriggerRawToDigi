//
// cfg file to unpack FED GT DAQ record from a NewEventStreamFileReader source 
//

process UnpackStreamFile = {

    // source file: FED GT DAQ file, produced by NewEventStreamFileReader 

    source = NewEventStreamFileReader {
        untracked vstring fileNames = {
          'file:/afs/cern.ch/user/g/ghete/scratch0/CmsswTestFiles/GtUnpackStreamFile_source.dat'
        }
    
        int32 max_event_size = 7000000
        int32 max_queue_depth = 5
    }

    // load and configure modules

    // L1 GT EventSetup
    include "L1TriggerConfig/L1GtConfigProducers/data/L1GtConfig.cff"
    replace L1GtPrescaleFactorsRcdSource.iovIsRunNotTime = false
    replace L1GtTriggerMaskRcdSource.iovIsRunNotTime = false
    replace L1GtParametersRcdSource.iovIsRunNotTime = false
    replace L1GtBoardMapsRcdSource.iovIsRunNotTime = false

    // L1 GMT EventSetup
    include "L1TriggerConfig/L1ScalesProducers/data/L1MuTriggerScalesConfig.cff"
    include "L1TriggerConfig/L1ScalesProducers/data/L1MuGMTScalesConfig.cff"
    include "L1TriggerConfig/GMTConfigProducers/data/L1MuGMTParametersConfig.cff"   

    // L1 GT/GMT unpacker
    include "EventFilter/L1GlobalTriggerRawToDigi/data/l1GtUnpack.cfi"

    // input tag 
    
    // NewEventStreamFile
    replace l1GtUnpack.DaqGtInputTag = "source"

    // Active Boards Mask

    // no board masked (default)
    //replace l1GtUnpack.ActiveBoardsMask = 0xFFFF
    
    // GTFE only in the record
    //replace l1GtUnpack.ActiveBoardsMask = 0x0000

    // GTFE + FDL 
    //replace l1GtUnpack.ActiveBoardsMask = 0x0001
     
    // GTFE + GMT 
    //replace l1GtUnpack.ActiveBoardsMask = 0x0100

    // GTFE + FDL + GMT 
    //replace l1GtUnpack.ActiveBoardsMask = 0x0101

    // BxInEvent to be unpacked
    // all available BxInEvent (default)
    //replace l1GtUnpack.UnpackBxInEvent = -1 

    // BxInEvent = 0 (L1A)
    //replace l1GtUnpack.UnpackBxInEvent = 1 

    // 3 BxInEvent (F, 0, 1)  
    //replace l1GtUnpack.UnpackBxInEvent = 3 

    // module list
    path p = { l1GtUnpack}
    
    // exception treatment
    untracked PSet options = {
       // skip the event if processing modules produce
       // category "A", "B", or "C" exceptions
       //vstring SkipEvent = { "A", "B", "C" }
       //vstring FailModule = { "Q" }
       //... one vstring per action type
       
       untracked vstring IgnoreCompletely = { "NotFound" }
    }    

    // uncomment / comment messages with DEBUG mode to run in DEBUG mode
    service = MessageLogger {

      untracked vstring destinations =  {"GtUnpackStreamFile"}
      untracked PSet GtUnpackStreamFile = { 
          untracked string threshold = "DEBUG"                    // DEBUG mode 
          untracked PSet DEBUG = { untracked int32 limit = -1}    // DEBUG mode, all messages  
          //untracked PSet DEBUG = { untracked int32 limit = 10}  // DEBUG mode, max 10 mess.  
          untracked PSet INFO = { untracked int32 limit = -1}    
      }
      untracked vstring debugModules = { "l1GtUnpack"}            // DEBUG mode 
      
    }
        
    module outputL1GtUnpack = PoolOutputModule { 

        // keep only unpacked data in the ROOT file
        untracked vstring outputCommands = {
            "drop *",
            "keep *_l1GtUnpack_*_*"
        }

        untracked string fileName = "GtUnpackStreamFile_output.root" 
    }
    endpath outpath = { outputL1GtUnpack }


}